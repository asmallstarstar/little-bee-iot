// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.7.0
// source: message/little_bee.proto

package littlebee

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignalRawValueService_BottomRawValueStream_FullMethodName       = "/message.SignalRawValueService/BottomRawValueStream"
	SignalRawValueService_CenterChannelValueStream_FullMethodName   = "/message.SignalRawValueService/CenterChannelValueStream"
	SignalRawValueService_FSUStatusStream_FullMethodName            = "/message.SignalRawValueService/FSUStatusStream"
	SignalRawValueService_BottomControlCommandStream_FullMethodName = "/message.SignalRawValueService/BottomControlCommandStream"
	SignalRawValueService_CenterControlCommandStream_FullMethodName = "/message.SignalRawValueService/CenterControlCommandStream"
)

// SignalRawValueServiceClient is the client API for SignalRawValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalRawValueServiceClient interface {
	BottomRawValueStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_BottomRawValueStreamClient, error)
	CenterChannelValueStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_CenterChannelValueStreamClient, error)
	FSUStatusStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_FSUStatusStreamClient, error)
	BottomControlCommandStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_BottomControlCommandStreamClient, error)
	CenterControlCommandStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_CenterControlCommandStreamClient, error)
}

type signalRawValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalRawValueServiceClient(cc grpc.ClientConnInterface) SignalRawValueServiceClient {
	return &signalRawValueServiceClient{cc}
}

func (c *signalRawValueServiceClient) BottomRawValueStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_BottomRawValueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalRawValueService_ServiceDesc.Streams[0], SignalRawValueService_BottomRawValueStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalRawValueServiceBottomRawValueStreamClient{stream}
	return x, nil
}

type SignalRawValueService_BottomRawValueStreamClient interface {
	Send(*SignalRawValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type signalRawValueServiceBottomRawValueStreamClient struct {
	grpc.ClientStream
}

func (x *signalRawValueServiceBottomRawValueStreamClient) Send(m *SignalRawValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalRawValueServiceBottomRawValueStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalRawValueServiceClient) CenterChannelValueStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_CenterChannelValueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalRawValueService_ServiceDesc.Streams[1], SignalRawValueService_CenterChannelValueStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalRawValueServiceCenterChannelValueStreamClient{stream}
	return x, nil
}

type SignalRawValueService_CenterChannelValueStreamClient interface {
	Send(*ChannelValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type signalRawValueServiceCenterChannelValueStreamClient struct {
	grpc.ClientStream
}

func (x *signalRawValueServiceCenterChannelValueStreamClient) Send(m *ChannelValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalRawValueServiceCenterChannelValueStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalRawValueServiceClient) FSUStatusStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_FSUStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalRawValueService_ServiceDesc.Streams[2], SignalRawValueService_FSUStatusStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalRawValueServiceFSUStatusStreamClient{stream}
	return x, nil
}

type SignalRawValueService_FSUStatusStreamClient interface {
	Send(*FSUStatus) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type signalRawValueServiceFSUStatusStreamClient struct {
	grpc.ClientStream
}

func (x *signalRawValueServiceFSUStatusStreamClient) Send(m *FSUStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalRawValueServiceFSUStatusStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalRawValueServiceClient) BottomControlCommandStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_BottomControlCommandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalRawValueService_ServiceDesc.Streams[3], SignalRawValueService_BottomControlCommandStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalRawValueServiceBottomControlCommandStreamClient{stream}
	return x, nil
}

type SignalRawValueService_BottomControlCommandStreamClient interface {
	Send(*ControlCommandReport) error
	Recv() (*BottomControlCommandRequest, error)
	grpc.ClientStream
}

type signalRawValueServiceBottomControlCommandStreamClient struct {
	grpc.ClientStream
}

func (x *signalRawValueServiceBottomControlCommandStreamClient) Send(m *ControlCommandReport) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalRawValueServiceBottomControlCommandStreamClient) Recv() (*BottomControlCommandRequest, error) {
	m := new(BottomControlCommandRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalRawValueServiceClient) CenterControlCommandStream(ctx context.Context, opts ...grpc.CallOption) (SignalRawValueService_CenterControlCommandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalRawValueService_ServiceDesc.Streams[4], SignalRawValueService_CenterControlCommandStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalRawValueServiceCenterControlCommandStreamClient{stream}
	return x, nil
}

type SignalRawValueService_CenterControlCommandStreamClient interface {
	Send(*ControlCommandReport) error
	Recv() (*CenterControlCommandRequest, error)
	grpc.ClientStream
}

type signalRawValueServiceCenterControlCommandStreamClient struct {
	grpc.ClientStream
}

func (x *signalRawValueServiceCenterControlCommandStreamClient) Send(m *ControlCommandReport) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalRawValueServiceCenterControlCommandStreamClient) Recv() (*CenterControlCommandRequest, error) {
	m := new(CenterControlCommandRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalRawValueServiceServer is the server API for SignalRawValueService service.
// All implementations must embed UnimplementedSignalRawValueServiceServer
// for forward compatibility
type SignalRawValueServiceServer interface {
	BottomRawValueStream(SignalRawValueService_BottomRawValueStreamServer) error
	CenterChannelValueStream(SignalRawValueService_CenterChannelValueStreamServer) error
	FSUStatusStream(SignalRawValueService_FSUStatusStreamServer) error
	BottomControlCommandStream(SignalRawValueService_BottomControlCommandStreamServer) error
	CenterControlCommandStream(SignalRawValueService_CenterControlCommandStreamServer) error
	mustEmbedUnimplementedSignalRawValueServiceServer()
}

// UnimplementedSignalRawValueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignalRawValueServiceServer struct {
}

func (UnimplementedSignalRawValueServiceServer) BottomRawValueStream(SignalRawValueService_BottomRawValueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BottomRawValueStream not implemented")
}
func (UnimplementedSignalRawValueServiceServer) CenterChannelValueStream(SignalRawValueService_CenterChannelValueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CenterChannelValueStream not implemented")
}
func (UnimplementedSignalRawValueServiceServer) FSUStatusStream(SignalRawValueService_FSUStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FSUStatusStream not implemented")
}
func (UnimplementedSignalRawValueServiceServer) BottomControlCommandStream(SignalRawValueService_BottomControlCommandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BottomControlCommandStream not implemented")
}
func (UnimplementedSignalRawValueServiceServer) CenterControlCommandStream(SignalRawValueService_CenterControlCommandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CenterControlCommandStream not implemented")
}
func (UnimplementedSignalRawValueServiceServer) mustEmbedUnimplementedSignalRawValueServiceServer() {}

// UnsafeSignalRawValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalRawValueServiceServer will
// result in compilation errors.
type UnsafeSignalRawValueServiceServer interface {
	mustEmbedUnimplementedSignalRawValueServiceServer()
}

func RegisterSignalRawValueServiceServer(s grpc.ServiceRegistrar, srv SignalRawValueServiceServer) {
	s.RegisterService(&SignalRawValueService_ServiceDesc, srv)
}

func _SignalRawValueService_BottomRawValueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalRawValueServiceServer).BottomRawValueStream(&signalRawValueServiceBottomRawValueStreamServer{stream})
}

type SignalRawValueService_BottomRawValueStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SignalRawValue, error)
	grpc.ServerStream
}

type signalRawValueServiceBottomRawValueStreamServer struct {
	grpc.ServerStream
}

func (x *signalRawValueServiceBottomRawValueStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalRawValueServiceBottomRawValueStreamServer) Recv() (*SignalRawValue, error) {
	m := new(SignalRawValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignalRawValueService_CenterChannelValueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalRawValueServiceServer).CenterChannelValueStream(&signalRawValueServiceCenterChannelValueStreamServer{stream})
}

type SignalRawValueService_CenterChannelValueStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ChannelValue, error)
	grpc.ServerStream
}

type signalRawValueServiceCenterChannelValueStreamServer struct {
	grpc.ServerStream
}

func (x *signalRawValueServiceCenterChannelValueStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalRawValueServiceCenterChannelValueStreamServer) Recv() (*ChannelValue, error) {
	m := new(ChannelValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignalRawValueService_FSUStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalRawValueServiceServer).FSUStatusStream(&signalRawValueServiceFSUStatusStreamServer{stream})
}

type SignalRawValueService_FSUStatusStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*FSUStatus, error)
	grpc.ServerStream
}

type signalRawValueServiceFSUStatusStreamServer struct {
	grpc.ServerStream
}

func (x *signalRawValueServiceFSUStatusStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalRawValueServiceFSUStatusStreamServer) Recv() (*FSUStatus, error) {
	m := new(FSUStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignalRawValueService_BottomControlCommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalRawValueServiceServer).BottomControlCommandStream(&signalRawValueServiceBottomControlCommandStreamServer{stream})
}

type SignalRawValueService_BottomControlCommandStreamServer interface {
	Send(*BottomControlCommandRequest) error
	Recv() (*ControlCommandReport, error)
	grpc.ServerStream
}

type signalRawValueServiceBottomControlCommandStreamServer struct {
	grpc.ServerStream
}

func (x *signalRawValueServiceBottomControlCommandStreamServer) Send(m *BottomControlCommandRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalRawValueServiceBottomControlCommandStreamServer) Recv() (*ControlCommandReport, error) {
	m := new(ControlCommandReport)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignalRawValueService_CenterControlCommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalRawValueServiceServer).CenterControlCommandStream(&signalRawValueServiceCenterControlCommandStreamServer{stream})
}

type SignalRawValueService_CenterControlCommandStreamServer interface {
	Send(*CenterControlCommandRequest) error
	Recv() (*ControlCommandReport, error)
	grpc.ServerStream
}

type signalRawValueServiceCenterControlCommandStreamServer struct {
	grpc.ServerStream
}

func (x *signalRawValueServiceCenterControlCommandStreamServer) Send(m *CenterControlCommandRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalRawValueServiceCenterControlCommandStreamServer) Recv() (*ControlCommandReport, error) {
	m := new(ControlCommandReport)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalRawValueService_ServiceDesc is the grpc.ServiceDesc for SignalRawValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalRawValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.SignalRawValueService",
	HandlerType: (*SignalRawValueServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BottomRawValueStream",
			Handler:       _SignalRawValueService_BottomRawValueStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CenterChannelValueStream",
			Handler:       _SignalRawValueService_CenterChannelValueStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FSUStatusStream",
			Handler:       _SignalRawValueService_FSUStatusStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BottomControlCommandStream",
			Handler:       _SignalRawValueService_BottomControlCommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CenterControlCommandStream",
			Handler:       _SignalRawValueService_CenterControlCommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/little_bee.proto",
}

const (
	CenterAnalysePayload_PayloadStream_FullMethodName = "/message.CenterAnalysePayload/PayloadStream"
)

// CenterAnalysePayloadClient is the client API for CenterAnalysePayload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterAnalysePayloadClient interface {
	PayloadStream(ctx context.Context, opts ...grpc.CallOption) (CenterAnalysePayload_PayloadStreamClient, error)
}

type centerAnalysePayloadClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterAnalysePayloadClient(cc grpc.ClientConnInterface) CenterAnalysePayloadClient {
	return &centerAnalysePayloadClient{cc}
}

func (c *centerAnalysePayloadClient) PayloadStream(ctx context.Context, opts ...grpc.CallOption) (CenterAnalysePayload_PayloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CenterAnalysePayload_ServiceDesc.Streams[0], CenterAnalysePayload_PayloadStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &centerAnalysePayloadPayloadStreamClient{stream}
	return x, nil
}

type CenterAnalysePayload_PayloadStreamClient interface {
	Send(*DriverToFsu) error
	Recv() (*FsuToDriver, error)
	grpc.ClientStream
}

type centerAnalysePayloadPayloadStreamClient struct {
	grpc.ClientStream
}

func (x *centerAnalysePayloadPayloadStreamClient) Send(m *DriverToFsu) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerAnalysePayloadPayloadStreamClient) Recv() (*FsuToDriver, error) {
	m := new(FsuToDriver)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CenterAnalysePayloadServer is the server API for CenterAnalysePayload service.
// All implementations must embed UnimplementedCenterAnalysePayloadServer
// for forward compatibility
type CenterAnalysePayloadServer interface {
	PayloadStream(CenterAnalysePayload_PayloadStreamServer) error
	mustEmbedUnimplementedCenterAnalysePayloadServer()
}

// UnimplementedCenterAnalysePayloadServer must be embedded to have forward compatible implementations.
type UnimplementedCenterAnalysePayloadServer struct {
}

func (UnimplementedCenterAnalysePayloadServer) PayloadStream(CenterAnalysePayload_PayloadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PayloadStream not implemented")
}
func (UnimplementedCenterAnalysePayloadServer) mustEmbedUnimplementedCenterAnalysePayloadServer() {}

// UnsafeCenterAnalysePayloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterAnalysePayloadServer will
// result in compilation errors.
type UnsafeCenterAnalysePayloadServer interface {
	mustEmbedUnimplementedCenterAnalysePayloadServer()
}

func RegisterCenterAnalysePayloadServer(s grpc.ServiceRegistrar, srv CenterAnalysePayloadServer) {
	s.RegisterService(&CenterAnalysePayload_ServiceDesc, srv)
}

func _CenterAnalysePayload_PayloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterAnalysePayloadServer).PayloadStream(&centerAnalysePayloadPayloadStreamServer{stream})
}

type CenterAnalysePayload_PayloadStreamServer interface {
	Send(*FsuToDriver) error
	Recv() (*DriverToFsu, error)
	grpc.ServerStream
}

type centerAnalysePayloadPayloadStreamServer struct {
	grpc.ServerStream
}

func (x *centerAnalysePayloadPayloadStreamServer) Send(m *FsuToDriver) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerAnalysePayloadPayloadStreamServer) Recv() (*DriverToFsu, error) {
	m := new(DriverToFsu)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CenterAnalysePayload_ServiceDesc is the grpc.ServiceDesc for CenterAnalysePayload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterAnalysePayload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.CenterAnalysePayload",
	HandlerType: (*CenterAnalysePayloadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PayloadStream",
			Handler:       _CenterAnalysePayload_PayloadStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/little_bee.proto",
}
